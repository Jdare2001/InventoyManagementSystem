@page "/Inventory"
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject InventoryService InventoryService

<PageTitle>Inventory</PageTitle>

<h1>Inventory</h1>
@inject IMDatabaseContext DbContext

<h3>Items</h3>
<button class="btn btn-primary" @onclick="NavigateToAddItem">Add a New Item</button>
<br/>
@if (InventoryItems != null &&   InventoryItems.Any())
{

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in InventoryItems)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Quantity</td>
                    <td>
                        <button class="btn btn-primary"@onclick="() =>OnShowModalUpdateClick(item)">Update Item</button>
                    </td>
                    <td>
                    <button class="btn btn-danger" @onclick="() => OnShowModalDeleteClick(item)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No items found.</p>
}
<Modal @ref="modalDelete" Title="Are You Sure?">
    <BodyTemplate>
        Are you sure you would like to remove this item?
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalDeleteClick">Close</Button>
        <Button class="btn btn-danger" @onclick="DeleteItem">Delete</Button>
    </FooterTemplate>
</Modal>


<Modal @ref="modalUpdate" Title="Edit Item">
    <BodyTemplate>
        <EditForm Model="currentItem" FormName="add-item">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="name">Name</label>
                <InputText id="name" class="form-control" @bind-Value="currentItem.Name" />
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <InputTextArea id="description" class="form-control" @bind-Value="currentItem.Description" />
            </div>

            <div class="form-group">
                <label for="quantity">Quantity</label>
                <InputNumber id="quantity" class="form-control" @bind-Value="currentItem.Quantity" />
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalUpdateClick">Close</Button>
        <Button class="btn btn-success" @onclick="UpdateItem">Save</Button>
    </FooterTemplate>
</Modal>
@code {
    private Item currentItem;
    private List<Item> InventoryItems = new List<Item>{};

    protected override async Task OnInitializedAsync()
    {
        InventoryItems = await InventoryService.GetInventoryItemsAsync();
    }
    private async Task UpdateItem(){
        await InventoryService.UpdateItemAsync(currentItem);
        
        InventoryItems = await InventoryService.GetInventoryItemsAsync(); // Refresh the list
        await OnHideModalUpdateClick();
    }

    private async Task DeleteItem()
    {
        await InventoryService.DeleteItemAsync(currentItem.Id);
        
        InventoryItems = await InventoryService.GetInventoryItemsAsync(); // Refresh the list
        await OnHideModalDeleteClick();
    }
    private void NavigateToAddItem(){

        Navigation.NavigateTo("/AddItem");
    }
    private Modal modalDelete;

    private async Task OnShowModalDeleteClick(Item item)
    {
        currentItem = item;
        await modalDelete?.ShowAsync();
    }

    private async Task OnHideModalDeleteClick()
    {
        await modalDelete?.HideAsync();
    }
    private Modal modalUpdate;

    private async Task OnShowModalUpdateClick(Item item)
    {
        currentItem = item;
        await modalUpdate?.ShowAsync();
    }

    private async Task OnHideModalUpdateClick()
    {
        await modalUpdate?.HideAsync();
    }

}